作为面试官，我会围绕视频编解码技术的核心原理、实际应用和问题解决能力设计问题，以下是一些可能的问题：

基础概念与原理
视频编解码的基本目标是什么？为什么需要压缩视频？
（考察对编解码核心需求的理解，如带宽、存储优化与质量平衡）

解释帧内预测（Intra Prediction）和帧间预测（Inter Prediction）的区别。
（考察对压缩算法的核心机制掌握）

什么是运动补偿（Motion Compensation）？它在压缩中如何减少冗余？
（考察关键技术的实现意义）

DCT（离散余弦变换）在编码中的作用是什么？为什么选择它而不是傅里叶变换？
（考察对频域处理的理解）

解释GOP（Group of Pictures）的结构，I帧、P帧、B帧的区别与作用。
（考察对视频序列组织的理解）

主流标准与对比
对比H.264、H.265（HEVC）和AV1的主要技术差异，各自的优缺点是什么？
（考察对标准演进和技术趋势的掌握）

H.265相比H.264的压缩效率提升来自哪些关键技术？
（如CTU划分、更复杂的运动预测等）

AV1为什么在开源生态中受到重视？它的核心技术有哪些？
（如帧内预测模式、自适应多分辨率等）

H.266/VVC（Versatile Video Coding）相比H.265有哪些改进？
（考察对最新标准的关注度）

实际应用与优化
如何设计码率控制（Rate Control）策略？如何平衡质量与码率？
（考察实际工程经验，如CBR、VBR、CRF等模式）

视频流媒体场景中，如何通过编解码优化减少卡顿？
（如GOP长度、关键帧插入、动态码率调整）

视频会议中，低延迟编解码需要考虑哪些因素？
（如减少B帧、降低参考帧数量、快速算法）

如果遇到解码端出现马赛克或花屏，可能的原因是什么？如何排查？
（考察错误恢复机制，如参考帧丢失、码流损坏、解码器兼容性）

性能与工具
如何利用多线程或GPU加速编解码过程？需要注意哪些问题？
（如帧级/片级并行、内存带宽瓶颈）

是否使用过FFmpeg/x264/x265等工具？举例说明你如何调优编码参数。
（考察实际工具使用经验，如预设参数、自定义矩阵等）

解释视频编码中的“环路滤波”（Loop Filter）及其作用。
（如去块效应滤波、SAO采样自适应补偿）

扩展与开放问题
AI在视频编解码中的应用有哪些？例如基于神经网络的压缩算法。
（考察对前沿技术的了解，如端到端学习、CNN优化）

如果让你设计一个面向8K超高清视频的编解码方案，你会关注哪些技术点？
（如高复杂度算法优化、硬件加速、HDR兼容性）

如何看待当前视频编码标准的专利问题（如HEVC的专利池）与开源替代方案（如AV1）的竞争？
（考察对行业生态的理解）

你是否有过优化编解码器性能或解决兼容性问题的实际经验？请举例说明。
（考察实战能力与问题解决思路）

评估重点
深度：是否能清晰解释技术原理（如“为什么用DCT”而非仅仅“DCT是什么”）。

实践：是否结合具体场景（如直播、点播、嵌入式设备）分析技术选择。

逻辑：回答是否结构化（如先定义问题，再拆解解决方案）。

前沿性：对AI编解码、VVC、AV1等新兴技术的了解程度。

可以根据候选人的回答逐步深入追问，例如让其对比具体算法或解释某个标准中的关键技术（如H.265的Merge模式）。



-------------------------------------
在线播放卡顿该怎么办？
​加缓冲区设置

问题：部分MP4文件无法解析，提示moov atom not found。
根因分析：

​流式MP4支持：发现文件采用“moov后置”结构，通过avio seek实现二次解析，并增加预读线程快速定位关键元数据。
​自定义容错逻辑：对异常时间戳插值处理，避免播放器崩溃。




X26X系列码率控制模型？
r-lambda模型

播放器使用的ffmpeg源碼 
在綫播放遇到的问题研究



Qos /FEC

QUIC协议

rtp/rtcp/rtsp
1.1、ARQ丢包重传
  ARQ 全称 Automatic Repeat reQuest，中文意译为丢包重传，是一种通过重传关键数据包来纠错的信道保护算法。
具体地来说，发送端给每一个数据包都植入顺序号码和时间戳，顺序号码代表被发送数据包的顺序，
允许接收端可以通过监测顺序号码来发现丢包事件；时间戳代表语音视频数据包解码的时间点。
发送端发送数据包后，如果接收端没有收到，接收端将会通过 信令 信道发送一个重传请求。
发送端维护一个缓冲队列，当收到重传请求的时候将会重传数据包。接收端也会维护一个缓冲队列，
等待尚未收到的数据包以及对已经收到的数据包进行排序。在解码的 deadline 到来之前，
接收端把缓冲区的数据包交给解码器进行解码。在解码 deadline 的时间点，接收端要么已经收齐了预期的数据包，要么已经决定放弃继续等待。

1.2、ABC码率自适应
  ABC 全称 Adaptive Bit-rate Control，中文意译为码率自适应，
是服务端和推流端协作控制码率来自动适应网络环境变化的技术。码率自适应的目的是为了对抗弱网环境。
在网络好的情况下，适当提高码率，提高语音视频的质量和降低延迟；在网络差的情况下，适当降低码率，保障语音视频通话的可用性和流畅性，适当牺牲音画质量。

1.3、FEC前向纠错
  FEC 全称是 Forward Error Correction，中文翻译为前向纠错，是一种通过增加冗余数据对丢失的数据包进行恢复的信道编码算法。
具体地说，由发送端对原始数据进行 FEC 编码，生成冗余奇偶校验数据包，原始数据和冗余数据包合并称作 FEC 数据块，
原始数据包和冗余数据包的数量比例是固定的。发送端发送 FEC 数据块。接收端接收到 FEC 数据块后，通过冗余数据包和原始数据包来恢复出丢失或者出错的数据包。
  FEC 编解码算法目前比较成熟的为： RS(Reeds-Solomon) 算法、Raptor 算法和 Tornado 算法。
  但罗马非一日建成，我们下面将从最基本的前向纠错算法来进行介绍。



HLS : ts
RTMP :flv


如何首帧出画时间？

​服务端GOP缓存
在服务器端缓存I帧（关键帧）​数据，确保播放器首次拉流时直接获取I帧，跳过等待依赖帧（P/B帧）的过程。
技术原理：I帧独立解码，无需参考其他帧，可立即渲染画面

